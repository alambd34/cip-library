apply plugin: 'maven-publish'
apply plugin: 'signing'


def isAlphaBuild() {
	return android.defaultConfig.versionName.contains("-ALPHA") == true
}

def isBetaBuild() {
	return android.defaultConfig.versionName.contains("-BETA") == true
}

def isSnapshotBuild() {
	return android.defaultConfig.versionName.contains("-SNAPSHOT") == true
}

def isReleaseBuild() {
	def alpha = isAlphaBuild()
	def beta = isBetaBuild()
	def snapshot = isSnapshotBuild()
	return !alpha && !beta && !snapshot
}

def getVersionBuild() {
	if( isAlphaBuild() ){
		return "ALPHA"
	}
	if( isBetaBuild() ){
		return "BETA"
	}
	if( isSnapshotBuild() ){
		return "SNAPSHOT"
	}
	if( isReleaseBuild() ){
		return "RELEASE"
	}
	return "unknow"
}

def getRepositoryUrl(){
	def url = ""

	if( isReleaseBuild() ){
		url = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
	} else if( isSnapshotBuild() ){
		url = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "https://oss.sonatype.org/content/repositories/snapshots/"
	}else{
		url = repositories.mavenLocal().url
	}

	return url
}

def getRepositoryUsername() {
	return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
	return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def valueMasked( value ){
	return value.replaceFirst( value.subSequence( 1, value.length()-1 ),{ match ->
		return "".padLeft(match.length(),"*")
	})
}

def printInfoUpload(){

	println '\n'

	def username = getRepositoryUsername()
	def password = getRepositoryPassword()

	println 'Getting username: '+ ((username!='') ? username : 'Error to get "nexusUsername" var')
	println 'Getting password: '+ ((password!='') ? valueMasked(password) : 'Error to get "nexusPassword" var')
	println 'Build type: '+ getVersionBuild() +' (versionName: '+ android.defaultConfig.versionName +')'
	println 'Url to upload: '+ getRepositoryUrl()

	println ''
}

task sourceJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	extension 'aar'
	classifier "sources"
}



afterEvaluate {

	publishing {

		repositories {
			maven {
				url getRepositoryUrl()
				credentials {
					username = getRepositoryUsername()
					password = getRepositoryPassword()
				}
				authentication {
					basic(BasicAuthentication)
				}
			}
		}

		publications {
			// Creates a Maven publication called "release".
			maven(MavenPublication) {
				// Applies the component for the release build variant.
				from components.release

				printInfoUpload()

				groupId = GROUP
				artifactId = POM_ARTIFACT_ID
				version = VERSION_NAME

				artifact(sourceJar)

				pom {
					name = POM_NAME
					packaging = POM_PACKAGING
					description = POM_DESCRIPTION
					url = POM_URL

					scm {
						url = POM_SCM_URL
						connection = POM_SCM_CONNECTION
						developerConnection = POM_SCM_DEV_CONNECTION
					}

					licenses {
						license {
							name = POM_LICENCE_NAME
							url = POM_LICENCE_URL
							distribution = POM_LICENCE_DIST
						}
					}

					developers {
						developer {
							id = POM_DEVELOPER_ID
							name = POM_DEVELOPER_NAME
							email = POM_DEVELOPER_EMAIL
						}
					}
				}
			}
		}
	}

	signing {
		sign publishing.publications.maven
	}

}